/* automatically generated by rust-bindgen 0.54.1 */

#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals, unused)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const SOCK_DIAG_BY_FAMILY: u32 = 20;
pub const SOCK_DESTROY: u32 = 21;
pub const TCPDIAG_GETSOCK: u32 = 18;
pub const DCCPDIAG_GETSOCK: u32 = 19;
pub const INET_DIAG_GETSOCK_MAX: u32 = 24;
pub const INET_DIAG_NOCOOKIE: i32 = -1;
pub const SI_LOAD_SHIFT: u32 = 16;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const NETLINK_ROUTE: u32 = 0;
pub const NETLINK_UNUSED: u32 = 1;
pub const NETLINK_USERSOCK: u32 = 2;
pub const NETLINK_FIREWALL: u32 = 3;
pub const NETLINK_SOCK_DIAG: u32 = 4;
pub const NETLINK_NFLOG: u32 = 5;
pub const NETLINK_XFRM: u32 = 6;
pub const NETLINK_SELINUX: u32 = 7;
pub const NETLINK_ISCSI: u32 = 8;
pub const NETLINK_AUDIT: u32 = 9;
pub const NETLINK_FIB_LOOKUP: u32 = 10;
pub const NETLINK_CONNECTOR: u32 = 11;
pub const NETLINK_NETFILTER: u32 = 12;
pub const NETLINK_IP6_FW: u32 = 13;
pub const NETLINK_DNRTMSG: u32 = 14;
pub const NETLINK_KOBJECT_UEVENT: u32 = 15;
pub const NETLINK_GENERIC: u32 = 16;
pub const NETLINK_SCSITRANSPORT: u32 = 18;
pub const NETLINK_ECRYPTFS: u32 = 19;
pub const NETLINK_RDMA: u32 = 20;
pub const NETLINK_CRYPTO: u32 = 21;
pub const NETLINK_SMC: u32 = 22;
pub const NETLINK_INET_DIAG: u32 = 4;
pub const MAX_LINKS: u32 = 32;
pub const NLM_F_REQUEST: u32 = 1;
pub const NLM_F_MULTI: u32 = 2;
pub const NLM_F_ACK: u32 = 4;
pub const NLM_F_ECHO: u32 = 8;
pub const NLM_F_DUMP_INTR: u32 = 16;
pub const NLM_F_DUMP_FILTERED: u32 = 32;
pub const NLM_F_ROOT: u32 = 256;
pub const NLM_F_MATCH: u32 = 512;
pub const NLM_F_ATOMIC: u32 = 1024;
pub const NLM_F_DUMP: u32 = 768;
pub const NLM_F_REPLACE: u32 = 256;
pub const NLM_F_EXCL: u32 = 512;
pub const NLM_F_CREATE: u32 = 1024;
pub const NLM_F_APPEND: u32 = 2048;
pub const NLM_F_NONREC: u32 = 256;
pub const NLM_F_CAPPED: u32 = 256;
pub const NLM_F_ACK_TLVS: u32 = 512;
pub const NLMSG_ALIGNTO: u32 = 4;
pub const NLMSG_NOOP: u32 = 1;
pub const NLMSG_ERROR: u32 = 2;
pub const NLMSG_DONE: u32 = 3;
pub const NLMSG_OVERRUN: u32 = 4;
pub const NLMSG_MIN_TYPE: u32 = 16;
pub const NETLINK_ADD_MEMBERSHIP: u32 = 1;
pub const NETLINK_DROP_MEMBERSHIP: u32 = 2;
pub const NETLINK_PKTINFO: u32 = 3;
pub const NETLINK_BROADCAST_ERROR: u32 = 4;
pub const NETLINK_NO_ENOBUFS: u32 = 5;
pub const NETLINK_RX_RING: u32 = 6;
pub const NETLINK_TX_RING: u32 = 7;
pub const NETLINK_LISTEN_ALL_NSID: u32 = 8;
pub const NETLINK_LIST_MEMBERSHIPS: u32 = 9;
pub const NETLINK_CAP_ACK: u32 = 10;
pub const NETLINK_EXT_ACK: u32 = 11;
pub const NETLINK_GET_STRICT_CHK: u32 = 12;
pub const NL_MMAP_MSG_ALIGNMENT: u32 = 4;
pub const NET_MAJOR: u32 = 36;
pub const NLA_F_NESTED: u32 = 32768;
pub const NLA_F_NET_BYTEORDER: u32 = 16384;
pub const NLA_TYPE_MASK: i32 = -49153;
pub const NLA_ALIGNTO: u32 = 4;
pub type __s8 = libc::c_schar;
pub type __u8 = libc::c_uchar;
pub type __s16 = libc::c_short;
pub type __u16 = libc::c_ushort;
pub type __s32 = libc::c_int;
pub type __u32 = libc::c_uint;
pub type __s64 = libc::c_longlong;
pub type __u64 = libc::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [libc::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::core::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::core::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t = ::core::option::Option<unsafe extern "C" fn(arg1: libc::c_int)>;
pub type __kernel_key_t = libc::c_int;
pub type __kernel_mqd_t = libc::c_int;
pub type __kernel_old_uid_t = libc::c_ushort;
pub type __kernel_old_gid_t = libc::c_ushort;
pub type __kernel_old_dev_t = libc::c_ulong;
pub type __kernel_long_t = libc::c_long;
pub type __kernel_ulong_t = libc::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = libc::c_uint;
pub type __kernel_pid_t = libc::c_int;
pub type __kernel_ipc_pid_t = libc::c_int;
pub type __kernel_uid_t = libc::c_uint;
pub type __kernel_gid_t = libc::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = libc::c_int;
pub type __kernel_uid32_t = libc::c_uint;
pub type __kernel_gid32_t = libc::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [libc::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = libc::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = libc::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = libc::c_int;
pub type __kernel_clockid_t = libc::c_int;
pub type __kernel_caddr_t = *mut libc::c_char;
pub type __kernel_uid16_t = libc::c_ushort;
pub type __kernel_gid16_t = libc::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock_diag_req {
    pub sdiag_family: __u8,
    pub sdiag_protocol: __u8,
}
#[test]
fn bindgen_test_layout_sock_diag_req() {
    assert_eq!(
        ::core::mem::size_of::<sock_diag_req>(),
        2usize,
        concat!("Size of: ", stringify!(sock_diag_req))
    );
    assert_eq!(
        ::core::mem::align_of::<sock_diag_req>(),
        1usize,
        concat!("Alignment of ", stringify!(sock_diag_req))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sock_diag_req>())).sdiag_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_diag_req),
            "::",
            stringify!(sdiag_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sock_diag_req>())).sdiag_protocol as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_diag_req),
            "::",
            stringify!(sdiag_protocol)
        )
    );
}
pub const SK_MEMINFO_RMEM_ALLOC: _bindgen_ty_1 = 0;
pub const SK_MEMINFO_RCVBUF: _bindgen_ty_1 = 1;
pub const SK_MEMINFO_WMEM_ALLOC: _bindgen_ty_1 = 2;
pub const SK_MEMINFO_SNDBUF: _bindgen_ty_1 = 3;
pub const SK_MEMINFO_FWD_ALLOC: _bindgen_ty_1 = 4;
pub const SK_MEMINFO_WMEM_QUEUED: _bindgen_ty_1 = 5;
pub const SK_MEMINFO_OPTMEM: _bindgen_ty_1 = 6;
pub const SK_MEMINFO_BACKLOG: _bindgen_ty_1 = 7;
pub const SK_MEMINFO_DROPS: _bindgen_ty_1 = 8;
pub const SK_MEMINFO_VARS: _bindgen_ty_1 = 9;
pub type _bindgen_ty_1 = u32;
pub const SKNLGRP_NONE: sknetlink_groups = 0;
pub const SKNLGRP_INET_TCP_DESTROY: sknetlink_groups = 1;
pub const SKNLGRP_INET_UDP_DESTROY: sknetlink_groups = 2;
pub const SKNLGRP_INET6_TCP_DESTROY: sknetlink_groups = 3;
pub const SKNLGRP_INET6_UDP_DESTROY: sknetlink_groups = 4;
pub const __SKNLGRP_MAX: sknetlink_groups = 5;
pub type sknetlink_groups = u32;
pub const SK_DIAG_BPF_STORAGE_REQ_NONE: _bindgen_ty_2 = 0;
pub const SK_DIAG_BPF_STORAGE_REQ_MAP_FD: _bindgen_ty_2 = 1;
pub const __SK_DIAG_BPF_STORAGE_REQ_MAX: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = u32;
pub const SK_DIAG_BPF_STORAGE_REP_NONE: _bindgen_ty_3 = 0;
pub const SK_DIAG_BPF_STORAGE: _bindgen_ty_3 = 1;
pub const __SK_DIAG_BPF_STORAGE_REP_MAX: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
pub const SK_DIAG_BPF_STORAGE_NONE: _bindgen_ty_4 = 0;
pub const SK_DIAG_BPF_STORAGE_PAD: _bindgen_ty_4 = 1;
pub const SK_DIAG_BPF_STORAGE_MAP_ID: _bindgen_ty_4 = 2;
pub const SK_DIAG_BPF_STORAGE_MAP_VALUE: _bindgen_ty_4 = 3;
pub const __SK_DIAG_BPF_STORAGE_MAX: _bindgen_ty_4 = 4;
pub type _bindgen_ty_4 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_sockid {
    pub idiag_sport: __be16,
    pub idiag_dport: __be16,
    pub idiag_src: [__be32; 4usize],
    pub idiag_dst: [__be32; 4usize],
    pub idiag_if: __u32,
    pub idiag_cookie: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_inet_diag_sockid() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_sockid>(),
        48usize,
        concat!("Size of: ", stringify!(inet_diag_sockid))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_sockid>(),
        4usize,
        concat!("Alignment of ", stringify!(inet_diag_sockid))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_sockid>())).idiag_sport as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_sport)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_sockid>())).idiag_dport as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_dport)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_sockid>())).idiag_src as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_sockid>())).idiag_dst as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_sockid>())).idiag_if as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_if)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_sockid>())).idiag_cookie as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_cookie)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_req {
    pub idiag_family: __u8,
    pub idiag_src_len: __u8,
    pub idiag_dst_len: __u8,
    pub idiag_ext: __u8,
    pub id: inet_diag_sockid,
    pub idiag_states: __u32,
    pub idiag_dbs: __u32,
}
#[test]
fn bindgen_test_layout_inet_diag_req() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_req>(),
        60usize,
        concat!("Size of: ", stringify!(inet_diag_req))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_req>(),
        4usize,
        concat!("Alignment of ", stringify!(inet_diag_req))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req>())).idiag_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req),
            "::",
            stringify!(idiag_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req>())).idiag_src_len as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req),
            "::",
            stringify!(idiag_src_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req>())).idiag_dst_len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req),
            "::",
            stringify!(idiag_dst_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req>())).idiag_ext as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req),
            "::",
            stringify!(idiag_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req>())).idiag_states as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req),
            "::",
            stringify!(idiag_states)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req>())).idiag_dbs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req),
            "::",
            stringify!(idiag_dbs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_req_v2 {
    pub sdiag_family: __u8,
    pub sdiag_protocol: __u8,
    pub idiag_ext: __u8,
    pub pad: __u8,
    pub idiag_states: __u32,
    pub id: inet_diag_sockid,
}
#[test]
fn bindgen_test_layout_inet_diag_req_v2() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_req_v2>(),
        56usize,
        concat!("Size of: ", stringify!(inet_diag_req_v2))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_req_v2>(),
        4usize,
        concat!("Alignment of ", stringify!(inet_diag_req_v2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_v2>())).sdiag_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_v2),
            "::",
            stringify!(sdiag_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<inet_diag_req_v2>())).sdiag_protocol as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_v2),
            "::",
            stringify!(sdiag_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_v2>())).idiag_ext as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_v2),
            "::",
            stringify!(idiag_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_v2>())).pad as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_v2),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_v2>())).idiag_states as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_v2),
            "::",
            stringify!(idiag_states)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_v2>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_v2),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_req_raw {
    pub sdiag_family: __u8,
    pub sdiag_protocol: __u8,
    pub idiag_ext: __u8,
    pub sdiag_raw_protocol: __u8,
    pub idiag_states: __u32,
    pub id: inet_diag_sockid,
}
#[test]
fn bindgen_test_layout_inet_diag_req_raw() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_req_raw>(),
        56usize,
        concat!("Size of: ", stringify!(inet_diag_req_raw))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_req_raw>(),
        4usize,
        concat!("Alignment of ", stringify!(inet_diag_req_raw))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_raw>())).sdiag_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(sdiag_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<inet_diag_req_raw>())).sdiag_protocol as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(sdiag_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_raw>())).idiag_ext as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(idiag_ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<inet_diag_req_raw>())).sdiag_raw_protocol as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(sdiag_raw_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_raw>())).idiag_states as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(idiag_states)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_req_raw>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(id)
        )
    );
}
pub const INET_DIAG_REQ_NONE: _bindgen_ty_5 = 0;
pub const INET_DIAG_REQ_BYTECODE: _bindgen_ty_5 = 1;
pub const INET_DIAG_REQ_SK_BPF_STORAGES: _bindgen_ty_5 = 2;
pub const __INET_DIAG_REQ_MAX: _bindgen_ty_5 = 3;
pub type _bindgen_ty_5 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_bc_op {
    pub code: libc::c_uchar,
    pub yes: libc::c_uchar,
    pub no: libc::c_ushort,
}
#[test]
fn bindgen_test_layout_inet_diag_bc_op() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_bc_op>(),
        4usize,
        concat!("Size of: ", stringify!(inet_diag_bc_op))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_bc_op>(),
        2usize,
        concat!("Alignment of ", stringify!(inet_diag_bc_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_bc_op>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_bc_op),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_bc_op>())).yes as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_bc_op),
            "::",
            stringify!(yes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_bc_op>())).no as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_bc_op),
            "::",
            stringify!(no)
        )
    );
}
pub const INET_DIAG_BC_NOP: _bindgen_ty_6 = 0;
pub const INET_DIAG_BC_JMP: _bindgen_ty_6 = 1;
pub const INET_DIAG_BC_S_GE: _bindgen_ty_6 = 2;
pub const INET_DIAG_BC_S_LE: _bindgen_ty_6 = 3;
pub const INET_DIAG_BC_D_GE: _bindgen_ty_6 = 4;
pub const INET_DIAG_BC_D_LE: _bindgen_ty_6 = 5;
pub const INET_DIAG_BC_AUTO: _bindgen_ty_6 = 6;
pub const INET_DIAG_BC_S_COND: _bindgen_ty_6 = 7;
pub const INET_DIAG_BC_D_COND: _bindgen_ty_6 = 8;
pub const INET_DIAG_BC_DEV_COND: _bindgen_ty_6 = 9;
pub const INET_DIAG_BC_MARK_COND: _bindgen_ty_6 = 10;
pub const INET_DIAG_BC_S_EQ: _bindgen_ty_6 = 11;
pub const INET_DIAG_BC_D_EQ: _bindgen_ty_6 = 12;
pub const INET_DIAG_BC_CGROUP_COND: _bindgen_ty_6 = 13;
pub type _bindgen_ty_6 = u32;
#[repr(C)]
#[derive(Debug)]
pub struct inet_diag_hostcond {
    pub family: __u8,
    pub prefix_len: __u8,
    pub port: libc::c_int,
    pub addr: __IncompleteArrayField<__be32>,
}
#[test]
fn bindgen_test_layout_inet_diag_hostcond() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_hostcond>(),
        8usize,
        concat!("Size of: ", stringify!(inet_diag_hostcond))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_hostcond>(),
        4usize,
        concat!("Alignment of ", stringify!(inet_diag_hostcond))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_hostcond>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_hostcond),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_hostcond>())).prefix_len as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_hostcond),
            "::",
            stringify!(prefix_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_hostcond>())).port as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_hostcond),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_hostcond>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_hostcond),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_markcond {
    pub mark: __u32,
    pub mask: __u32,
}
#[test]
fn bindgen_test_layout_inet_diag_markcond() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_markcond>(),
        8usize,
        concat!("Size of: ", stringify!(inet_diag_markcond))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_markcond>(),
        4usize,
        concat!("Alignment of ", stringify!(inet_diag_markcond))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_markcond>())).mark as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_markcond),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_markcond>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_markcond),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_msg {
    pub idiag_family: __u8,
    pub idiag_state: __u8,
    pub idiag_timer: __u8,
    pub idiag_retrans: __u8,
    pub id: inet_diag_sockid,
    pub idiag_expires: __u32,
    pub idiag_rqueue: __u32,
    pub idiag_wqueue: __u32,
    pub idiag_uid: __u32,
    pub idiag_inode: __u32,
}
#[test]
fn bindgen_test_layout_inet_diag_msg() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_msg>(),
        72usize,
        concat!("Size of: ", stringify!(inet_diag_msg))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_msg>(),
        4usize,
        concat!("Alignment of ", stringify!(inet_diag_msg))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_state as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_timer as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_retrans as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_retrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_expires as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_rqueue as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_rqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_wqueue as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_wqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_uid as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_msg>())).idiag_inode as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_inode)
        )
    );
}
pub const INET_DIAG_NONE: _bindgen_ty_7 = 0;
pub const INET_DIAG_MEMINFO: _bindgen_ty_7 = 1;
pub const INET_DIAG_INFO: _bindgen_ty_7 = 2;
pub const INET_DIAG_VEGASINFO: _bindgen_ty_7 = 3;
pub const INET_DIAG_CONG: _bindgen_ty_7 = 4;
pub const INET_DIAG_TOS: _bindgen_ty_7 = 5;
pub const INET_DIAG_TCLASS: _bindgen_ty_7 = 6;
pub const INET_DIAG_SKMEMINFO: _bindgen_ty_7 = 7;
pub const INET_DIAG_SHUTDOWN: _bindgen_ty_7 = 8;
pub const INET_DIAG_DCTCPINFO: _bindgen_ty_7 = 9;
pub const INET_DIAG_PROTOCOL: _bindgen_ty_7 = 10;
pub const INET_DIAG_SKV6ONLY: _bindgen_ty_7 = 11;
pub const INET_DIAG_LOCALS: _bindgen_ty_7 = 12;
pub const INET_DIAG_PEERS: _bindgen_ty_7 = 13;
pub const INET_DIAG_PAD: _bindgen_ty_7 = 14;
pub const INET_DIAG_MARK: _bindgen_ty_7 = 15;
pub const INET_DIAG_BBRINFO: _bindgen_ty_7 = 16;
pub const INET_DIAG_CLASS_ID: _bindgen_ty_7 = 17;
pub const INET_DIAG_MD5SIG: _bindgen_ty_7 = 18;
pub const INET_DIAG_ULP_INFO: _bindgen_ty_7 = 19;
pub const INET_DIAG_SK_BPF_STORAGES: _bindgen_ty_7 = 20;
pub const INET_DIAG_CGROUP_ID: _bindgen_ty_7 = 21;
pub const __INET_DIAG_MAX: _bindgen_ty_7 = 22;
pub type _bindgen_ty_7 = u32;
pub const INET_ULP_INFO_UNSPEC: _bindgen_ty_8 = 0;
pub const INET_ULP_INFO_NAME: _bindgen_ty_8 = 1;
pub const INET_ULP_INFO_TLS: _bindgen_ty_8 = 2;
pub const INET_ULP_INFO_MPTCP: _bindgen_ty_8 = 3;
pub const __INET_ULP_INFO_MAX: _bindgen_ty_8 = 4;
pub type _bindgen_ty_8 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_meminfo {
    pub idiag_rmem: __u32,
    pub idiag_wmem: __u32,
    pub idiag_fmem: __u32,
    pub idiag_tmem: __u32,
}
#[test]
fn bindgen_test_layout_inet_diag_meminfo() {
    assert_eq!(
        ::core::mem::size_of::<inet_diag_meminfo>(),
        16usize,
        concat!("Size of: ", stringify!(inet_diag_meminfo))
    );
    assert_eq!(
        ::core::mem::align_of::<inet_diag_meminfo>(),
        4usize,
        concat!("Alignment of ", stringify!(inet_diag_meminfo))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_meminfo>())).idiag_rmem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_meminfo),
            "::",
            stringify!(idiag_rmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_meminfo>())).idiag_wmem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_meminfo),
            "::",
            stringify!(idiag_wmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_meminfo>())).idiag_fmem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_meminfo),
            "::",
            stringify!(idiag_fmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<inet_diag_meminfo>())).idiag_tmem as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_meminfo),
            "::",
            stringify!(idiag_tmem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpvegas_info {
    pub tcpv_enabled: __u32,
    pub tcpv_rttcnt: __u32,
    pub tcpv_rtt: __u32,
    pub tcpv_minrtt: __u32,
}
#[test]
fn bindgen_test_layout_tcpvegas_info() {
    assert_eq!(
        ::core::mem::size_of::<tcpvegas_info>(),
        16usize,
        concat!("Size of: ", stringify!(tcpvegas_info))
    );
    assert_eq!(
        ::core::mem::align_of::<tcpvegas_info>(),
        4usize,
        concat!("Alignment of ", stringify!(tcpvegas_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcpvegas_info>())).tcpv_enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcpvegas_info),
            "::",
            stringify!(tcpv_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcpvegas_info>())).tcpv_rttcnt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcpvegas_info),
            "::",
            stringify!(tcpv_rttcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcpvegas_info>())).tcpv_rtt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcpvegas_info),
            "::",
            stringify!(tcpv_rtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcpvegas_info>())).tcpv_minrtt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcpvegas_info),
            "::",
            stringify!(tcpv_minrtt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_dctcp_info {
    pub dctcp_enabled: __u16,
    pub dctcp_ce_state: __u16,
    pub dctcp_alpha: __u32,
    pub dctcp_ab_ecn: __u32,
    pub dctcp_ab_tot: __u32,
}
#[test]
fn bindgen_test_layout_tcp_dctcp_info() {
    assert_eq!(
        ::core::mem::size_of::<tcp_dctcp_info>(),
        16usize,
        concat!("Size of: ", stringify!(tcp_dctcp_info))
    );
    assert_eq!(
        ::core::mem::align_of::<tcp_dctcp_info>(),
        4usize,
        concat!("Alignment of ", stringify!(tcp_dctcp_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_dctcp_info>())).dctcp_enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_dctcp_info>())).dctcp_ce_state as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_ce_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_dctcp_info>())).dctcp_alpha as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_dctcp_info>())).dctcp_ab_ecn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_ab_ecn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_dctcp_info>())).dctcp_ab_tot as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_ab_tot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_bbr_info {
    pub bbr_bw_lo: __u32,
    pub bbr_bw_hi: __u32,
    pub bbr_min_rtt: __u32,
    pub bbr_pacing_gain: __u32,
    pub bbr_cwnd_gain: __u32,
}
#[test]
fn bindgen_test_layout_tcp_bbr_info() {
    assert_eq!(
        ::core::mem::size_of::<tcp_bbr_info>(),
        20usize,
        concat!("Size of: ", stringify!(tcp_bbr_info))
    );
    assert_eq!(
        ::core::mem::align_of::<tcp_bbr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(tcp_bbr_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_bbr_info>())).bbr_bw_lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_bw_lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_bbr_info>())).bbr_bw_hi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_bw_hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_bbr_info>())).bbr_min_rtt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_min_rtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_bbr_info>())).bbr_pacing_gain as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_pacing_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_bbr_info>())).bbr_cwnd_gain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_cwnd_gain)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tcp_cc_info {
    pub vegas: tcpvegas_info,
    pub dctcp: tcp_dctcp_info,
    pub bbr: tcp_bbr_info,
    _bindgen_union_align: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_tcp_cc_info() {
    assert_eq!(
        ::core::mem::size_of::<tcp_cc_info>(),
        20usize,
        concat!("Size of: ", stringify!(tcp_cc_info))
    );
    assert_eq!(
        ::core::mem::align_of::<tcp_cc_info>(),
        4usize,
        concat!("Alignment of ", stringify!(tcp_cc_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_cc_info>())).vegas as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cc_info),
            "::",
            stringify!(vegas)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_cc_info>())).dctcp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cc_info),
            "::",
            stringify!(dctcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tcp_cc_info>())).bbr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cc_info),
            "::",
            stringify!(bbr)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: __IncompleteArrayField<libc::c_char>,
}
#[test]
fn bindgen_test_layout_sysinfo() {
    assert_eq!(
        ::core::mem::size_of::<sysinfo>(),
        112usize,
        concat!("Size of: ", stringify!(sysinfo))
    );
    assert_eq!(
        ::core::mem::align_of::<sysinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(sysinfo))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).uptime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(uptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).loads as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(loads)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).totalram as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalram)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).freeram as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeram)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).sharedram as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(sharedram)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).bufferram as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(bufferram)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).totalswap as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).freeswap as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).procs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(procs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).pad as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).totalhigh as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalhigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).freehigh as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freehigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>())).mem_unit as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(mem_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysinfo>()))._f as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(_f)
        )
    );
}
pub type __kernel_sa_family_t = libc::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __kernel_sockaddr_storage__bindgen_ty_1 {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
    pub __align: *mut libc::c_void,
    _bindgen_union_align: [u64; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [libc::c_char; 126usize],
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>()))
                .ss_family as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>()))
                .__data as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__data)
        )
    );
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1),
            "::",
            stringify!(__align)
        )
    );
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage() {
    assert_eq!(
        ::core::mem::size_of::<__kernel_sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_sockaddr_storage))
    );
    assert_eq!(
        ::core::mem::align_of::<__kernel_sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_sockaddr_storage))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_nl {
    pub nl_family: __kernel_sa_family_t,
    pub nl_pad: libc::c_ushort,
    pub nl_pid: __u32,
    pub nl_groups: __u32,
}
#[test]
fn bindgen_test_layout_sockaddr_nl() {
    assert_eq!(
        ::core::mem::size_of::<sockaddr_nl>(),
        12usize,
        concat!("Size of: ", stringify!(sockaddr_nl))
    );
    assert_eq!(
        ::core::mem::align_of::<sockaddr_nl>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_nl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sockaddr_nl>())).nl_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sockaddr_nl>())).nl_pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sockaddr_nl>())).nl_pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sockaddr_nl>())).nl_groups as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_groups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsghdr {
    pub nlmsg_len: __u32,
    pub nlmsg_type: __u16,
    pub nlmsg_flags: __u16,
    pub nlmsg_seq: __u32,
    pub nlmsg_pid: __u32,
}
#[test]
fn bindgen_test_layout_nlmsghdr() {
    assert_eq!(
        ::core::mem::size_of::<nlmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(nlmsghdr))
    );
    assert_eq!(
        ::core::mem::align_of::<nlmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(nlmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlmsghdr>())).nlmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlmsghdr>())).nlmsg_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlmsghdr>())).nlmsg_flags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlmsghdr>())).nlmsg_seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlmsghdr>())).nlmsg_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsgerr {
    pub error: libc::c_int,
    pub msg: nlmsghdr,
}
#[test]
fn bindgen_test_layout_nlmsgerr() {
    assert_eq!(
        ::core::mem::size_of::<nlmsgerr>(),
        20usize,
        concat!("Size of: ", stringify!(nlmsgerr))
    );
    assert_eq!(
        ::core::mem::align_of::<nlmsgerr>(),
        4usize,
        concat!("Alignment of ", stringify!(nlmsgerr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlmsgerr>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsgerr),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlmsgerr>())).msg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsgerr),
            "::",
            stringify!(msg)
        )
    );
}
pub const NLMSGERR_ATTR_UNUSED: nlmsgerr_attrs = 0;
pub const NLMSGERR_ATTR_MSG: nlmsgerr_attrs = 1;
pub const NLMSGERR_ATTR_OFFS: nlmsgerr_attrs = 2;
pub const NLMSGERR_ATTR_COOKIE: nlmsgerr_attrs = 3;
pub const __NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 4;
pub const NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 3;
pub type nlmsgerr_attrs = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_pktinfo {
    pub group: __u32,
}
#[test]
fn bindgen_test_layout_nl_pktinfo() {
    assert_eq!(
        ::core::mem::size_of::<nl_pktinfo>(),
        4usize,
        concat!("Size of: ", stringify!(nl_pktinfo))
    );
    assert_eq!(
        ::core::mem::align_of::<nl_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_pktinfo>())).group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_pktinfo),
            "::",
            stringify!(group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_req {
    pub nm_block_size: libc::c_uint,
    pub nm_block_nr: libc::c_uint,
    pub nm_frame_size: libc::c_uint,
    pub nm_frame_nr: libc::c_uint,
}
#[test]
fn bindgen_test_layout_nl_mmap_req() {
    assert_eq!(
        ::core::mem::size_of::<nl_mmap_req>(),
        16usize,
        concat!("Size of: ", stringify!(nl_mmap_req))
    );
    assert_eq!(
        ::core::mem::align_of::<nl_mmap_req>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_mmap_req))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_req>())).nm_block_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_req>())).nm_block_nr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_block_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_req>())).nm_frame_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_frame_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_req>())).nm_frame_nr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_frame_nr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_hdr {
    pub nm_status: libc::c_uint,
    pub nm_len: libc::c_uint,
    pub nm_group: __u32,
    pub nm_pid: __u32,
    pub nm_uid: __u32,
    pub nm_gid: __u32,
}
#[test]
fn bindgen_test_layout_nl_mmap_hdr() {
    assert_eq!(
        ::core::mem::size_of::<nl_mmap_hdr>(),
        24usize,
        concat!("Size of: ", stringify!(nl_mmap_hdr))
    );
    assert_eq!(
        ::core::mem::align_of::<nl_mmap_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_mmap_hdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_hdr>())).nm_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_hdr>())).nm_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_hdr>())).nm_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_hdr>())).nm_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_hdr>())).nm_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nl_mmap_hdr>())).nm_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_gid)
        )
    );
}
pub const NL_MMAP_STATUS_UNUSED: nl_mmap_status = 0;
pub const NL_MMAP_STATUS_RESERVED: nl_mmap_status = 1;
pub const NL_MMAP_STATUS_VALID: nl_mmap_status = 2;
pub const NL_MMAP_STATUS_COPY: nl_mmap_status = 3;
pub const NL_MMAP_STATUS_SKIP: nl_mmap_status = 4;
pub type nl_mmap_status = u32;
pub const NETLINK_UNCONNECTED: _bindgen_ty_9 = 0;
pub const NETLINK_CONNECTED: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlattr {
    pub nla_len: __u16,
    pub nla_type: __u16,
}
#[test]
fn bindgen_test_layout_nlattr() {
    assert_eq!(
        ::core::mem::size_of::<nlattr>(),
        4usize,
        concat!("Size of: ", stringify!(nlattr))
    );
    assert_eq!(
        ::core::mem::align_of::<nlattr>(),
        2usize,
        concat!("Alignment of ", stringify!(nlattr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlattr>())).nla_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlattr),
            "::",
            stringify!(nla_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nlattr>())).nla_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nlattr),
            "::",
            stringify!(nla_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nla_bitfield32 {
    pub value: __u32,
    pub selector: __u32,
}
#[test]
fn bindgen_test_layout_nla_bitfield32() {
    assert_eq!(
        ::core::mem::size_of::<nla_bitfield32>(),
        8usize,
        concat!("Size of: ", stringify!(nla_bitfield32))
    );
    assert_eq!(
        ::core::mem::align_of::<nla_bitfield32>(),
        4usize,
        concat!("Alignment of ", stringify!(nla_bitfield32))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nla_bitfield32>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nla_bitfield32),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<nla_bitfield32>())).selector as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nla_bitfield32),
            "::",
            stringify!(selector)
        )
    );
}
pub const NL_ATTR_TYPE_INVALID: netlink_attribute_type = 0;
pub const NL_ATTR_TYPE_FLAG: netlink_attribute_type = 1;
pub const NL_ATTR_TYPE_U8: netlink_attribute_type = 2;
pub const NL_ATTR_TYPE_U16: netlink_attribute_type = 3;
pub const NL_ATTR_TYPE_U32: netlink_attribute_type = 4;
pub const NL_ATTR_TYPE_U64: netlink_attribute_type = 5;
pub const NL_ATTR_TYPE_S8: netlink_attribute_type = 6;
pub const NL_ATTR_TYPE_S16: netlink_attribute_type = 7;
pub const NL_ATTR_TYPE_S32: netlink_attribute_type = 8;
pub const NL_ATTR_TYPE_S64: netlink_attribute_type = 9;
pub const NL_ATTR_TYPE_BINARY: netlink_attribute_type = 10;
pub const NL_ATTR_TYPE_STRING: netlink_attribute_type = 11;
pub const NL_ATTR_TYPE_NUL_STRING: netlink_attribute_type = 12;
pub const NL_ATTR_TYPE_NESTED: netlink_attribute_type = 13;
pub const NL_ATTR_TYPE_NESTED_ARRAY: netlink_attribute_type = 14;
pub const NL_ATTR_TYPE_BITFIELD32: netlink_attribute_type = 15;
pub type netlink_attribute_type = u32;
pub const NL_POLICY_TYPE_ATTR_UNSPEC: netlink_policy_type_attr = 0;
pub const NL_POLICY_TYPE_ATTR_TYPE: netlink_policy_type_attr = 1;
pub const NL_POLICY_TYPE_ATTR_MIN_VALUE_S: netlink_policy_type_attr = 2;
pub const NL_POLICY_TYPE_ATTR_MAX_VALUE_S: netlink_policy_type_attr = 3;
pub const NL_POLICY_TYPE_ATTR_MIN_VALUE_U: netlink_policy_type_attr = 4;
pub const NL_POLICY_TYPE_ATTR_MAX_VALUE_U: netlink_policy_type_attr = 5;
pub const NL_POLICY_TYPE_ATTR_MIN_LENGTH: netlink_policy_type_attr = 6;
pub const NL_POLICY_TYPE_ATTR_MAX_LENGTH: netlink_policy_type_attr = 7;
pub const NL_POLICY_TYPE_ATTR_POLICY_IDX: netlink_policy_type_attr = 8;
pub const NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE: netlink_policy_type_attr = 9;
pub const NL_POLICY_TYPE_ATTR_BITFIELD32_MASK: netlink_policy_type_attr = 10;
pub const NL_POLICY_TYPE_ATTR_PAD: netlink_policy_type_attr = 11;
pub const __NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = 12;
pub const NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = 11;
pub type netlink_policy_type_attr = u32;
